{"version":3,"sources":["pages/Login.js","actions/index.js","components/HeaderWallet.js","components/ExpenseForm.js","components/sub_components/ExpenseTableRow.js","components/ExpenseTable.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["Login","state","email","password","btnDisable","redirect","handleChange","bind","handleClick","checkValid","this","test","length","setState","target","value","name","e","preventDefault","add","props","to","className","htmlFor","id","data-testid","type","onChange","disabled","onClick","React","Component","connect","dispatch","user","HeaderWallet","expenses","fmt","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","total","reduce","acc","currency","exchangeRates","parseFloat","ask","format","defaultProps","wallet","ExpenseForm","description","method","tag","nowEditing","saveClick","replaceClick","fetchCurr","fetchCurrencies","editing","edit","loadEdit","expense","currenciesResp","addExp","addExpense","cleanState","replace","currencies","map","c","key","currenciesSelect","methodSelect","tagSelect","sendBtn","a","fetch","request","json","obj","USDT","console","log","replaceExpense","ExpenseTableRow","rmv","edt","split","rmvExpense","edtExpense","ExpenseTable","scope","Wallet","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL","undefined","action","INITAL","Object","keys","filter","exp","slice","findIndex","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7834eac4.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { func } from 'prop-types';\nimport { addUser } from '../actions';\nimport './style/Login.css';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      password: '',\n      btnDisable: true,\n      redirect: false,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.checkValid = this.checkValid.bind(this);\n  }\n\n  checkValid() {\n    const { email, password } = this.state;\n    const passwordMinLength = 6;\n    const regEx = /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/i; // source regExp: https://mailtrap.io/blog/react-native-email-validation/\n    if (regEx.test(email) && password.length >= passwordMinLength) {\n      this.setState({ btnDisable: false });\n    } else {\n      this.setState({ btnDisable: true });\n    }\n  }\n\n  handleChange({ target }) {\n    const { value, name } = target;\n    this.setState({ [name]: value }, this.checkValid);\n  }\n\n  handleClick(e) {\n    e.preventDefault();\n    const { add } = this.props;\n    const { email } = this.state;\n    add(email);\n    this.setState({ redirect: true });\n  }\n\n  render() {\n    const { redirect, btnDisable } = this.state;\n    return (\n      <>\n        {redirect && <Redirect to=\"/carteira\" />}\n        <form className=\"login-form\">\n          <h1>TrybeWallet</h1>\n          <label htmlFor=\"email-input\" className=\"form-label\">\n            Email:\n            <input\n              id=\"email-input\"\n              name=\"email\"\n              data-testid=\"email-input\"\n              type=\"email\"\n              className=\"form-control\"\n              onChange={ this.handleChange }\n            />\n          </label>\n\n          <label htmlFor=\"pass-input\">\n            Password:\n            <input\n              id=\"pass-input\"\n              name=\"password\"\n              data-testid=\"password-input\"\n              type=\"password\"\n              className=\"form-control\"\n              onChange={ this.handleChange }\n            />\n          </label>\n          <button\n            type=\"button\"\n            disabled={ btnDisable }\n            className=\"btn btn-primary\"\n            onClick={ this.handleClick }\n          >\n            Entrar\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  add: (user) => dispatch(addUser(user)),\n});\n\nLogin.propTypes = {\n  add: func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","export const ADD_USER = 'ADD_USER';\nexport const ADD_CURRENCIES = 'ADD_CURRENCIES';\nexport const ADD_EXPENSE = 'ADD_EXPENSE';\nexport const RMV_EXPENSE = 'RMV_EXPENSE';\nexport const EDT_EXPENSE = 'EDT_EXPENSE';\nexport const REPLACE_EXPENSE = 'REPLACE_EXPENSE';\n\nexport const addUser = (email) => ({ type: ADD_USER, email });\nexport const addCurrencies = (currencies) => ({ type: ADD_CURRENCIES, currencies });\nexport const addExpense = (expense) => ({ type: ADD_EXPENSE, expense });\nexport const rmvExpense = (id) => ({ type: RMV_EXPENSE, id });\nexport const edtExpense = (expense) => ({ type: EDT_EXPENSE, expense });\nexport const replaceExpense = (expense) => ({ type: REPLACE_EXPENSE, expense });\n\nexport const fetchCurrencies = () => (\n  async (dispatch) => {\n    try {\n      const request = await fetch('https://economia.awesomeapi.com.br/json/all');\n      const obj = await request.json();\n      delete obj.USDT;\n      dispatch(addCurrencies(obj));\n    } catch (e) {\n      console.log(e);\n    }\n  }\n);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { string, arrayOf, shape, number } from 'prop-types';\n\nclass HeaderWallet extends React.Component {\n  render() {\n    const { email, expenses } = this.props;\n    const fmt = new Intl.NumberFormat('en-US', {\n      style: 'decimal',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    });\n    const total = expenses.reduce(\n      (acc,\n        {\n          value,\n          currency,\n          exchangeRates,\n        }) => acc + parseFloat(exchangeRates[currency].ask) * parseFloat(value),\n      0,\n    );\n    return (\n      <header\n        className=\"d-flex flex-column flex-md-row\n        align-items-center p-2 mb-3 border-bottom shadow-sm\"\n      >\n        <h1 className=\"my-0 mr-md-auto font-weight-normal\">TrybeWallet</h1>\n        <div>\n          <span className=\"p-1\" data-testid=\"email-field\">{`${email} |`}</span>\n          <span className=\"p-1\" data-testid=\"total-field\">{fmt.format(total)}</span>\n          <span className=\"p-1\" data-testid=\"header-currency-field\">BRL</span>\n        </div>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  expenses: state.wallet.expenses,\n});\n\nHeaderWallet.defaultProps = {\n  email: '',\n};\n\nHeaderWallet.propTypes = {\n  email: string,\n  expenses: arrayOf(\n    shape({\n      id: number,\n      value: string,\n      currency: string,\n    }),\n  ).isRequired,\n};\n\nexport default connect(mapStateToProps)(HeaderWallet);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { func, arrayOf, string, number, shape, bool } from 'prop-types';\nimport { fetchCurrencies, addExpense, replaceExpense } from '../actions';\n\nclass ExpenseForm extends React.Component {\n  constructor(props) {\n    super(props);\n    // const { currencies } = this.props;\n    this.state = {\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      nowEditing: false,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.saveClick = this.saveClick.bind(this);\n    this.replaceClick = this.replaceClick.bind(this);\n  }\n\n  componentDidMount() {\n    const { fetchCurrencies: fetchCurr } = this.props;\n    fetchCurr();\n  }\n\n  componentDidUpdate() {\n    const { editing } = this.props;\n    const { nowEditing } = this.state;\n    if (editing.edit && !nowEditing) this.loadEdit(editing);\n  }\n\n  loadEdit(editing) {\n    const { value, description, currency, method, tag } = editing.expense;\n    this.setState({\n      value, description, currency, method, tag, nowEditing: true,\n    });\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  cleanState() {\n    this.setState({\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      nowEditing: false,\n    });\n  }\n\n  saveClick(e) {\n    e.preventDefault();\n    const {\n      fetchCurrencies: fetchCurr,\n      currenciesResp,\n      addExpense: addExp,\n      expenses,\n    } = this.props;\n    fetchCurr();\n    const id = expenses.length;\n    const { value, description, currency, method, tag } = this.state;\n    const expenseObj = {\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      id,\n      exchangeRates: currenciesResp,\n    };\n    addExp(expenseObj);\n    this.cleanState();\n  }\n\n  replaceClick(e) {\n    e.preventDefault();\n    const { replace, editing } = this.props;\n    const { value, description, currency, method, tag } = this.state;\n    replace({ ...editing.expense, value, description, currency, method, tag });\n    this.cleanState();\n  }\n\n  currenciesSelect(currencies, currency) {\n    return (\n      <label htmlFor=\"currency-input\">\n        Moeda\n        <select\n          className=\"form-select\"\n          name=\"currency\"\n          data-testid=\"currency-input\"\n          id=\"currency-input\"\n          value={ currency }\n          onChange={ this.handleChange }\n        >\n          {currencies.map((c) => <option key={ c } value={ c }>{c}</option>)}\n        </select>\n      </label>\n    );\n  }\n\n  methodSelect(method) {\n    return (\n      <label htmlFor=\"method-input\">\n        Método de pagamento\n        <select\n          className=\"form-select\"\n          name=\"method\"\n          data-testid=\"method-input\"\n          id=\"method-input\"\n          value={ method }\n          onChange={ this.handleChange }\n        >\n          <option value=\"Dinheiro\">Dinheiro</option>\n          <option value=\"Cartão de crédito\">Cartão de crédito</option>\n          <option value=\"Cartão de débito\">Cartão de débito</option>\n        </select>\n      </label>\n    );\n  }\n\n  tagSelect(tag) {\n    return (\n      <label htmlFor=\"tag-input\">\n        Tag\n        <select\n          className=\"form-select\"\n          name=\"tag\"\n          id=\"tag-input\"\n          value={ tag }\n          data-testid=\"tag-input\"\n          onChange={ this.handleChange }\n        >\n          <option value=\"Alimentação\">Alimentação</option>\n          <option value=\"Lazer\">Lazer</option>\n          <option value=\"Trabalho\">Trabalho</option>\n          <option value=\"Transporte\">Transporte</option>\n          <option value=\"Saúde\">Saúde</option>\n        </select>\n      </label>\n    );\n  }\n\n  sendBtn() {\n    const { nowEditing } = this.state;\n    if (nowEditing) {\n      return (\n        <button className=\"btn btn-success\" type=\"submit\" onClick={ this.replaceClick }>\n          Editar despesa\n        </button>\n      );\n    }\n    return (\n      <button className=\"btn btn-success\" type=\"submit\" onClick={ this.saveClick }>\n        Adicionar despesa\n      </button>\n    );\n  }\n\n  render() {\n    const { currencies } = this.props;\n    const { value, description, currency, method, tag } = this.state;\n    return (\n      <form className=\"row gy-2 gx-3 align-items-end justify-content-center\">\n        <div className=\"col-auto\">\n          <label htmlFor=\"valor-input\">\n            Valor\n            <input\n              className=\"form-control\"\n              data-testid=\"value-input\"\n              type=\"number\"\n              name=\"value\"\n              id=\"valor-input\"\n              value={ value }\n              onChange={ this.handleChange }\n            />\n          </label>\n        </div>\n        <div className=\"col-auto\">\n          <label htmlFor=\"description-input\">\n            Descrição\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              data-testid=\"description-input\"\n              name=\"description\"\n              id=\"description-input\"\n              value={ description }\n              onChange={ this.handleChange }\n            />\n          </label>\n        </div>\n        <div className=\"col-auto\">{this.currenciesSelect(currencies, currency)}</div>\n        <div className=\"col-auto\">{this.methodSelect(method)}</div>\n        <div className=\"col-auto\">{this.tagSelect(tag)}</div>\n        <div className=\"col-auto\">{this.sendBtn()}</div>\n      </form>\n    );\n  }\n}\nExpenseForm.defaultProps = {\n  expenses: [],\n  editing: { edit: false, expense: {} },\n  currenciesResp: {},\n};\nExpenseForm.propTypes = {\n  fetchCurrencies: func.isRequired,\n  addExpense: func.isRequired,\n  replace: func.isRequired,\n  currencies: arrayOf(string).isRequired,\n  currenciesResp: shape({\n    USD: shape({ code: string, ask: string }),\n  }),\n  expenses: arrayOf(\n    shape({\n      id: number,\n      value: string,\n      description: string,\n    }),\n  ),\n  editing: shape({\n    edit: bool,\n    expense: shape({\n      id: number,\n      value: string,\n      description: string,\n    }),\n  }),\n};\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n  currenciesResp: state.wallet.currenciesResp,\n  expenses: state.wallet.expenses,\n  editing: state.wallet.editing,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCurrencies: () => dispatch(fetchCurrencies()),\n  addExpense: (expense) => dispatch(addExpense(expense)),\n  replace: (expense) => dispatch(replaceExpense(expense)),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpenseForm);\n","import React from 'react';\nimport { string, shape, func } from 'prop-types';\nimport { connect } from 'react-redux';\nimport { rmvExpense, edtExpense } from '../../actions';\n\nclass ExpenseTableRow extends React.Component {\n  render() {\n    const { expense, rmv, edt } = this.props;\n\n    const fmt = new Intl.NumberFormat('en-US', {\n      style: 'decimal',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    });\n\n    return (\n      <tr key={ expense.id }>\n        <td>{expense.description}</td>\n        <td>{expense.tag}</td>\n        <td>{expense.method}</td>\n        <td>{expense.value}</td>\n        <td>{expense.exchangeRates[expense.currency].name.split('/')[0]}</td>\n        <td>{fmt.format(expense.exchangeRates[expense.currency].ask)}</td>\n        <td>\n          {fmt.format(\n            parseFloat(expense.value)\n              * parseFloat(expense.exchangeRates[expense.currency].ask),\n          )}\n        </td>\n        <td>Real</td>\n        <td className=\"btns-td\">\n          <input\n            data-testid=\"delete-btn\"\n            className=\"btn btn-danger\"\n            type=\"button\"\n            value=\"Excluir\"\n            onClick={ () => rmv(expense.id) }\n          />\n          <input\n            data-testid=\"edit-btn\"\n            className=\"btn btn-warning\"\n            type=\"button\"\n            value=\"Editar\"\n            onClick={ () => edt(expense) }\n          />\n        </td>\n      </tr>\n    );\n  }\n}\n\nExpenseTableRow.propTypes = {\n  expense: shape({\n    description: string,\n    tag: string,\n    method: string,\n    value: string,\n    currency: string,\n  }).isRequired,\n  rmv: func.isRequired,\n  edt: func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  rmv: (id) => dispatch(rmvExpense(id)),\n  edt: (expense) => dispatch(edtExpense(expense)),\n});\n\nexport default connect(null, mapDispatchToProps)(ExpenseTableRow);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { shape, arrayOf, string } from 'prop-types';\nimport ExpenseTableRow from './sub_components/ExpenseTableRow';\n\nclass ExpenseTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    };\n  }\n\n  render() {\n    const { expenses } = this.props;\n    return (\n      <table\n        className=\"table table-striped table-bordered\n        table-hover align-middle text-center\"\n      >\n        <tbody>\n          <tr>\n            <th scope=\"col\">Descrição</th>\n            <th scope=\"col\">Tag</th>\n            <th scope=\"col\">Método de pagamento</th>\n            <th scope=\"col\">Valor</th>\n            <th scope=\"col\">Moeda</th>\n            <th scope=\"col\">Câmbio utilizado</th>\n            <th scope=\"col\">Valor convertido</th>\n            <th scope=\"col\">Moeda de conversão</th>\n            <th scope=\"col\">Editar/Excluir</th>\n          </tr>\n          {expenses ? expenses.map((expense) => (\n            <ExpenseTableRow key={ expense.id } expense={ expense } />\n          )) : null}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nExpenseTable.propTypes = {\n  expenses: arrayOf(shape({\n    description: string,\n    tag: string,\n    method: string,\n    value: string,\n    currency: string,\n  })).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps)(ExpenseTable);\n","import React from 'react';\nimport HeaderWallet from '../components/HeaderWallet';\nimport ExpenseForm from '../components/ExpenseForm';\nimport ExpenseTable from '../components/ExpenseTable';\nimport './style/Wallet.css';\n\nclass Wallet extends React.Component {\n  render() {\n    return (\n      <>\n        <HeaderWallet />\n        <ExpenseForm />\n        <ExpenseTable />\n      </>\n    );\n  }\n}\n\nexport default Wallet;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/carteira\" component={ Wallet } />\n      <Route exact path=\"/\" component={ Login } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { ADD_USER } from '../actions';\n\nconst INITIAL = {\n  email: undefined,\n};\n\nconst user = (state = INITIAL, action) => {\n  switch (action.type) {\n  case ADD_USER:\n    return { email: action.email };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport {\n  ADD_CURRENCIES,\n  ADD_EXPENSE,\n  RMV_EXPENSE,\n  EDT_EXPENSE,\n  REPLACE_EXPENSE,\n} from '../actions';\n\nconst INITAL = {\n  currencies: [],\n  currenciesResp: {},\n  expenses: [],\n  editing: { edit: false, expense: {} },\n};\n\nconst wallet = (state = INITAL, action) => {\n  switch (action.type) {\n  case ADD_CURRENCIES:\n    return {\n      ...state,\n      currencies: [...Object.keys(action.currencies)],\n      currenciesResp: action.currencies,\n    };\n  case ADD_EXPENSE:\n    return { ...state, expenses: [...state.expenses, action.expense] };\n  case RMV_EXPENSE:\n    return {\n      ...state,\n      expenses: state.expenses.filter((exp) => exp.id !== action.id),\n    };\n  case EDT_EXPENSE:\n    return { ...state, editing: { edit: true, expense: action.expense } };\n  case REPLACE_EXPENSE:\n    // const expIndex = state.expenses.findIndex(({ id }) => id === action.expense.id);\n    return {\n      ...state,\n      expenses: [\n        ...state.expenses.slice(\n          0,\n          state.expenses.findIndex(({ id }) => id === action.expense.id),\n        ),\n        action.expense,\n        ...state.expenses.slice(\n          state.expenses.findIndex(({ id }) => id === action.expense.id) + 1,\n        ),\n      ],\n      editing: { edit: false, expense: {} },\n    };\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n// Configure os seus reducers.\n\nconst rootReducer = combineReducers({ user, wallet });\nexport default rootReducer;\n\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}